import asyncio
import json
from typing import Dict, Any, Optional
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sd_client import StableDiffusionClient

class AdvancedGenerationStates(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_negative_prompt = State()
    waiting_for_steps = State()
    waiting_for_cfg_scale = State()
    waiting_for_size = State()

class AdvancedFeatures:
    def __init__(self, sd_client: StableDiffusionClient):
        self.sd_client = sd_client
    
    async def start_advanced_generation(self, message: types.Message, state: FSMContext):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        await state.set_state(AdvancedGenerationStates.waiting_for_prompt)
        await message.answer(
            "üé® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è):"
        )
    
    async def handle_advanced_prompt(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        prompt = message.text
        await state.update_data(prompt=prompt)
        await state.set_state(AdvancedGenerationStates.waiting_for_negative_prompt)
        
        await message.answer(
            "üìù –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—á—Ç–æ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏):\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'skip' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
        )
    
    async def handle_negative_prompt(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        negative_prompt = message.text if message.text.lower() != 'skip' else ""
        await state.update_data(negative_prompt=negative_prompt)
        await state.set_state(AdvancedGenerationStates.waiting_for_steps)
        
        await message.answer(
            "üìù –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (20-50, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20):\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'default' –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )
    
    async def handle_steps(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤"""
        try:
            if message.text.lower() == 'default':
                steps = 20
            else:
                steps = int(message.text)
                if steps < 1 or steps > 100:
                    await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(steps=steps)
        await state.set_state(AdvancedGenerationStates.waiting_for_cfg_scale)
        
        await message.answer(
            f"üìù –®–∞–≥–∏: {steps}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CFG Scale (1-20, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7):\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'default' –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )
    
    async def handle_cfg_scale(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CFG Scale"""
        try:
            if message.text.lower() == 'default':
                cfg_scale = 7
            else:
                cfg_scale = float(message.text)
                if cfg_scale < 1 or cfg_scale > 20:
                    await message.answer("‚ùå CFG Scale –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 20. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(cfg_scale=cfg_scale)
        await state.set_state(AdvancedGenerationStates.waiting_for_size)
        
        await message.answer(
            f"üìù CFG Scale: {cfg_scale}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–∏–Ω–∞x–≤—ã—Å–æ—Ç–∞':\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 512x512, 768x512, 512x768\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'default' –¥–ª—è 512x512"
        )
    
    async def handle_size(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if message.text.lower() == 'default':
            width, height = 512, 512
        else:
            try:
                size_parts = message.text.lower().split('x')
                if len(size_parts) != 2:
                    raise ValueError
                width = int(size_parts[0])
                height = int(size_parts[1])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –∫—Ä–∞—Ç–Ω—ã–µ 8 (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ SD)
                if width % 8 != 0 or height % 8 != 0:
                    await message.answer("‚ùå –†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 8. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                
                if width < 64 or height < 64 or width > 2048 or height > 2048:
                    await message.answer("‚ùå –†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 64 –¥–æ 2048. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                    return
                    
            except (ValueError, IndexError):
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—à–∏—Ä–∏–Ω–∞x–≤—ã—Å–æ—Ç–∞'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        
        await state.update_data(width=width, height=height)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        summary = f"""
üé® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:

üìù –ü—Ä–æ–º–ø—Ç: {data['prompt']}
üö´ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {data.get('negative_prompt', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üë£ –®–∞–≥–∏: {data['steps']}
‚öñÔ∏è CFG Scale: {data['cfg_scale']}
üìè –†–∞–∑–º–µ—Ä: {data['width']}x{data['height']}

–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...
        """
        
        status_msg = await message.answer(summary)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            result = self.sd_client.txt2img(
                prompt=data['prompt'],
                negative_prompt=data.get('negative_prompt', ''),
                steps=data['steps'],
                cfg_scale=data['cfg_scale'],
                width=data['width'],
                height=data['height']
            )
            
            if result and 'images' in result:
                import base64
                import io
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_data = base64.b64decode(result['images'][0])
                image_bytes = io.BytesIO(image_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await message.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=types.BufferedInputFile(image_bytes.getvalue(), filename="advanced_generated.png"),
                    caption=f"üé® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n\nüìù –ü—Ä–æ–º–ø—Ç: {data['prompt']}"
                )
                
                await status_msg.delete()
            else:
                await status_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                
        except Exception as e:
            await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        finally:
            await state.clear()
    
    async def show_samplers(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—ç–º–ø–ª–µ—Ä—ã"""
        samplers = [
            "Euler", "Euler a", "LMS", "Heun", "DPM2", "DPM2 a", "DPM++ 2S a",
            "DPM++ 2M", "DPM++ SDE", "DPM fast", "DPM adaptive", "LMS Karras",
            "DPM2 Karras", "DPM2 a Karras", "DPM++ 2S a Karras", "DPM++ 2M Karras",
            "DPM++ SDE Karras", "DDIM", "PLMS"
        ]
        
        sampler_list = "\n".join([f"‚Ä¢ {sampler}" for sampler in samplers])
        
        await message.answer(
            f"üé≤ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—ç–º–ø–ª–µ—Ä—ã:\n\n{sampler_list}\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: DPM++ 2M Karras"
        )
    
    async def show_models(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        models = self.sd_client.get_models()
        if models:
            model_info = []
            for i, model in enumerate(models[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                title = model.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                model_info.append(f"{i}. {title}")
            
            if len(models) > 5:
                model_info.append(f"... –∏ –µ—â–µ {len(models) - 5} –º–æ–¥–µ–ª–µ–π")
            
            model_list = "\n".join(model_info)
            
            await message.answer(
                f"ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n\n{model_list}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /switch_model –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
    
    async def switch_model(self, message: types.Message):
        """–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = message.text
        if text.startswith('/switch_model'):
            model_name = text.replace('/switch_model', '').strip()
            
            if not model_name:
                await message.answer(
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏!\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /switch_model novaFurryXL_illustriousV9b.safetensors"
                )
                return
            
            status_msg = await message.answer(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é –º–æ–¥–µ–ª—å –Ω–∞: {model_name}")
            
            if self.sd_client.switch_model(model_name):
                await status_msg.edit_text(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: {model_name}")
            else:
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {model_name}")
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                "–ü—Ä–∏–º–µ—Ä: /switch_model novaFurryXL_illustriousV9b.safetensors"
            ) 