import asyncio
import base64
import io
import logging
import time
import threading
from concurrent.futures import ThreadPoolExecutor
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime

from config import BOT_TOKEN, SD_MODEL_PATH
from sd_client import StableDiffusionClient
from advanced_features import AdvancedFeatures, AdvancedGenerationStates
from queue_manager import queue_manager, GenerationStatus, GenerationStage
from prompt_enhancer import enhance_prompt, get_default_negative_prompt
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_user_message(message: types.Message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = message.from_user
    if user:
        log_msg = (
            f"[USER MSG] {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | "
            f"user_id={user.id} | username={user.username or 'None'} | first_name={user.first_name or 'None'} | "
            f"text={repr(message.text)}"
        )
        logging.info(log_msg)
    else:
        logging.warning(f"[USER MSG] {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | Unknown user | text={repr(message.text)}")

def log_user_callback(callback: types.CallbackQuery):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = callback.from_user
    if user:
        log_msg = (
            f"[USER CALLBACK] {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | "
            f"user_id={user.id} | username={user.username or 'None'} | first_name={user.first_name or 'None'} | "
            f"data={repr(callback.data)}"
        )
        logging.info(log_msg)
    else:
        logging.warning(f"[USER CALLBACK] {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | Unknown user | data={repr(callback.data)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ config.py")
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
sd_client = StableDiffusionClient()
advanced_features = AdvancedFeatures(sd_client)

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
generation_executor = ThreadPoolExecutor(max_workers=3, thread_name_prefix="SD_Generator")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
active_tasks = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GenerationStates(StatesGroup):
    waiting_for_prompt = State()
    waiting_for_params = State()
    waiting_for_animal_type = State()
    waiting_for_gender = State()
    waiting_for_fur_color = State()
    waiting_for_clothing = State()
    waiting_for_pose = State()
    waiting_for_expression = State()
    waiting_for_location = State()
    waiting_for_activity = State()
    waiting_for_priority = State()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"),
                KeyboardButton(text="üêæ –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
            ],
            [
                KeyboardButton(text="üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"),
                KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å SD")
            ],
            [
                KeyboardButton(text="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"),
                KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
            ],
            [
                KeyboardButton(text="üé≤ –°—ç–º–ø–ª–µ—Ä—ã"),
                KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
            ],
            [
                KeyboardButton(text="üìä –û—á–µ—Ä–µ–¥—å"),
                KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")
            ],
            [
                KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
    )
    return keyboard

def get_generation_keyboard(task_id: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{task_id}")
            ]
        ]
    )
    return keyboard

def get_simple_generation_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_simple")
            ]
        ]
    )
    return keyboard

def get_advanced_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∞–≥–∏", callback_data="settings_steps"),
                InlineKeyboardButton(text="‚öñÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å CFG", callback_data="settings_cfg")
            ],
            [
                InlineKeyboardButton(text="üìè –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="settings_size"),
                InlineKeyboardButton(text="üé≤ –í—ã–±—Ä–∞—Ç—å —Å—ç–º–ø–ª–µ—Ä", callback_data="settings_sampler")
            ],
            [
                InlineKeyboardButton(text="üö´ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç", callback_data="settings_negative"),
                InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_save")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
    )
    return keyboard

def get_models_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π"""
    try:
        models = sd_client.get_models()
        if not models:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"‚≠ê {config.DEFAULT_MODEL_TITLE} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)",
                            callback_data=f"switch_model_{config.DEFAULT_MODEL}"
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    ]
                ]
            )
            return keyboard
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        buttons = []
        for model in models:
            model_title = model.get('title', model.get('model_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å'))
            model_name = model.get('model_name', model_title)
            
            # –û—Ç–º–µ—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å –∑–≤–µ–∑–¥–æ—á–∫–æ–π
            if config.DEFAULT_MODEL in model_name or config.DEFAULT_MODEL in model_title:
                button_text = f"‚≠ê {model_title} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)"
            else:
                button_text = model_title
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_name –¥–ª—è callback_data, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ç–æ—á–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            buttons.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"switch_model_{model_name}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        buttons.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        return keyboard
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—à–∏–±–∫–æ–π
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π", callback_data="back_to_main")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]
            ]
        )
        return keyboard


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é
def get_stage_description(stage: GenerationStage) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    descriptions = {
        GenerationStage.INITIALIZING: "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
        GenerationStage.LOADING_MODEL: "ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...",
        GenerationStage.PROCESSING_PROMPT: "üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞...",
        GenerationStage.GENERATING_IMAGE: "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...",
        GenerationStage.ENCODING_RESULT: "üíæ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...",
        GenerationStage.FINALIZING: "‚ú® –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞..."
    }
    return descriptions.get(stage, "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

def get_stage_progress_range(stage: GenerationStage) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —ç—Ç–∞–ø–∞"""
    ranges = {
        GenerationStage.INITIALIZING: (0, 10),
        GenerationStage.LOADING_MODEL: (10, 25),
        GenerationStage.PROCESSING_PROMPT: (25, 35),
        GenerationStage.GENERATING_IMAGE: (35, 85),
        GenerationStage.ENCODING_RESULT: (85, 95),
        GenerationStage.FINALIZING: (95, 100)
    }
    return ranges.get(stage, (0, 100))

async def process_generation_queue():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    while True:
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–∏
            task = queue_manager.start_processing()
            if task:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                if task.id not in active_tasks:
                    active_tasks[task.id] = True
                    asyncio.create_task(process_task_async(task))
            else:
                # –ù–µ—Ç –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏, –∂–¥–µ–º
                await asyncio.sleep(1)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            await asyncio.sleep(5)

async def process_task_async(task):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        result = await loop.run_in_executor(generation_executor, process_task_sync, task)
        
        if result:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await send_generation_result(task, result)
        else:
            await send_generation_error(task, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
        queue_manager.fail_task(task.id, str(e))
        await send_generation_error(task, str(e))
    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        active_tasks.pop(task.id, None)

def process_task_sync(task):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        # –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        queue_manager.update_task_progress(task.id, GenerationStage.INITIALIZING, 5)
        time.sleep(0.5)
        
        # –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        queue_manager.update_task_progress(task.id, GenerationStage.LOADING_MODEL, 15)
        time.sleep(1)
        
        # –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        queue_manager.update_task_progress(task.id, GenerationStage.PROCESSING_PROMPT, 30)
        time.sleep(0.5)
        
        # –£–ª—É—á—à–∞–µ–º –ø—Ä–æ–º–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        enhanced_prompt = enhance_prompt(task.prompt)
        enhanced_negative = get_default_negative_prompt()
        
        # –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        queue_manager.update_task_progress(task.id, GenerationStage.GENERATING_IMAGE, 40)
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        for progress in range(40, 85, 5):
            queue_manager.update_task_progress(task.id, GenerationStage.GENERATING_IMAGE, progress)
            time.sleep(0.3)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
        generation_params = task.parameters or {}
        generation_params['prompt'] = enhanced_prompt
        generation_params['negative_prompt'] = enhanced_negative
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = sd_client.txt2img(enhanced_prompt, negative_prompt=enhanced_negative, **(task.parameters or {}))
        
        if result and 'images' in result:
            # –≠—Ç–∞–ø 5: –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            queue_manager.update_task_progress(task.id, GenerationStage.ENCODING_RESULT, 90)
            time.sleep(0.5)
            
            # –≠—Ç–∞–ø 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            queue_manager.update_task_progress(task.id, GenerationStage.FINALIZING, 100)
            time.sleep(0.3)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            queue_manager.complete_task(task.id, result)
            return result
        else:
            queue_manager.fail_task(task.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return None
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
        queue_manager.fail_task(task.id, str(e))
        return None



async def send_generation_result(task, result):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = base64.b64decode(result['images'][0])
        image_bytes = io.BytesIO(image_data)
        
        # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        enhanced_prompt = enhance_prompt(task.prompt)
        negative_prompt = get_default_negative_prompt()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await bot.send_photo(
            chat_id=task.user_id,
            photo=types.BufferedInputFile(image_bytes.getvalue(), filename="generated.png"),
            caption=f"üé® <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\nüìù –ü—Ä–æ–º–ø—Ç: <code>{enhanced_prompt}</code>\n\nüö´ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π: <code>{negative_prompt}</code>\n\n‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

async def send_generation_error(task, error):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        enhanced_prompt = enhance_prompt(task.prompt)
        negative_prompt = get_default_negative_prompt()
        
        await bot.send_message(
            chat_id=task.user_id,
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>\n\nüìù –ü—Ä–æ–º–ø—Ç: <code>{enhanced_prompt}</code>\n\nüö´ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π: <code>{negative_prompt}</code>\n\nüö´ –û—à–∏–±–∫–∞: {error}",
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏: {e}")

async def monitor_task_progress(task, status_msg):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–µ"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
        while task.status == GenerationStatus.QUEUED:
            await asyncio.sleep(2)
            queue_position = queue_manager.get_queue_position(task.id)
            if queue_position > 0:
                await status_msg.edit_text(
                    f"üìã <b>–û–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏</b>\n\n"
                    f"üìù –ü—Ä–æ–º–ø—Ç: <code>{task.prompt}</code>\n\n"
                    f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                    reply_markup=get_generation_keyboard(task.id),
                    parse_mode="HTML"
                )
            else:
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        while task.status == GenerationStatus.PROCESSING:
            await update_progress_message(task, status_msg)
            await asyncio.sleep(1)
            
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await status_msg.delete()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

async def update_progress_message(task, message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    try:
        stage_desc = get_stage_description(task.stage)
        progress_percent = int(task.progress)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏)
        queue_position = queue_manager.get_queue_position(task.id)
        queue_info = ""
        if queue_position > 0:
            queue_info = f"\nüìã –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}"
        
        status_text = f"""
üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...</b>

üìù –ü—Ä–æ–º–ø—Ç: <code>{task.prompt}</code>
{stage_desc}
‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}%
{queue_info}
        """
        
        await message.edit_text(
            status_text,
            reply_markup=get_generation_keyboard(task.id),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    log_user_message(message)
    welcome_text = """
üé® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Advanced Stable Diffusion Bot!</b>

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!

üí° <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>
‚Ä¢ üêæ <b>–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</b> - –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
‚Ä¢ üé® <b>–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b> - –ø—Ä—è–º–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å

üîß <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç—É—Å SD - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebUI
‚Ä¢ üìã –ú–æ–¥–µ–ª–∏ - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
‚Ä¢ üé≤ –°—ç–º–ø–ª–µ—Ä—ã - –≤—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
‚Ä¢ üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ üìä –û—á–µ—Ä–µ–¥—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    log_user_message(message)
    help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" –∏–ª–∏
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

üîÑ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
‚Ä¢ –í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤ –∏ CFG Scale

‚öôÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ üë£ –®–∞–≥–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π (20 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ ‚öñÔ∏è CFG Scale: —Å–∏–ª–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç—É (7 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ üìè –†–∞–∑–º–µ—Ä: —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (512x512 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ üé≤ –°—ç–º–ø–ª–µ—Ä: –∞–ª–≥–æ—Ä–∏—Ç–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

üìã <b>–°–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–∏:</b>
‚Ä¢ –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å
‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —ç—Ç–∞–ø–∞–º
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤:</b>
‚Ä¢ "–∫—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ –≤ –ª–µ—Å—É, —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ"
‚Ä¢ "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫"
‚Ä¢ "–º–∏–ª—ã–π –∫–æ—Ç–µ–Ω–æ–∫, –∞–∫–≤–∞—Ä–µ–ª—å"
‚Ä¢ "–ø–æ—Ä—Ç—Ä–µ—Ç —Ä—ã—Ü–∞—Ä—è –≤ –¥–æ—Å–ø–µ—Ö–∞—Ö, —ç–ø–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"

‚ú® <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ:</b>
‚Ä¢ –ö –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è "(masterpiece, best quality, 8k:1.3)"
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞

üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏:</b>
‚Ä¢ üìã –ú–æ–¥–µ–ª–∏ - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
‚Ä¢ üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
‚Ä¢ üé≤ –°—ç–º–ø–ª–µ—Ä—ã - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    """
    await message.answer(help_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ SD WebUI"""
    log_user_message(message)
    status_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å Stable Diffusion WebUI...")
    
    if sd_client.is_available():
        models = sd_client.get_models()
        if models:
            current_model = next((m for m in models if m.get('title')), None)
            model_name = current_model.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if current_model else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—á–µ—Ä–µ–¥–∏
            queue_info = queue_manager.get_queue_info()
            
            status_text = f"""
‚úÖ <b>Stable Diffusion WebUI –¥–æ—Å—Ç—É–ø–µ–Ω!</b>

üåê URL: <code>{sd_client.base_url}</code>
ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{model_name}</code>
üìä –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: <code>{len(models)}</code>

üìã <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:</b>
‚Ä¢ –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: <code>{queue_info['queue_length']}</code>
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: <code>{'–î–∞' if queue_info['processing'] else '–ù–µ—Ç'}</code>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: <code>{queue_info['total_tasks']}</code>
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <code>{queue_info['completed_tasks']}</code>
            """
        else:
            status_text = "‚úÖ Stable Diffusion WebUI –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"
    else:
        status_text = """
‚ùå <b>Stable Diffusion WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!</b>

–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:
1. SD WebUI –∑–∞–ø—É—â–µ–Ω
2. API –≤–∫–ª—é—á–µ–Ω (--api —Ñ–ª–∞–≥)
3. URL –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        """
    
    await status_msg.edit_text(status_text, parse_mode="HTML")

@dp.message(Command("models"))
async def cmd_models(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    log_user_message(message)
    await advanced_features.show_models(message)

@dp.message(Command("samplers"))
async def cmd_samplers(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—ç–º–ø–ª–µ—Ä—ã"""
    log_user_message(message)
    await advanced_features.show_samplers(message)

@dp.message(Command("switch_model"))
async def cmd_switch_model(message: types.Message):
    """–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"""
    log_user_message(message)
    await advanced_features.switch_model(message)

@dp.message(Command("generate"))
async def cmd_generate(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    log_user_message(message)
    await state.set_state(GenerationStates.waiting_for_prompt)
    await message.answer("üé® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:")

@dp.message(Command("advanced"))
async def cmd_advanced(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
    log_user_message(message)
    await advanced_features.start_advanced_generation(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message(F.text == "üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def handle_create_image(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    log_user_message(message)
    await state.set_state(GenerationStates.waiting_for_prompt)
    await message.answer(
        "üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ beautiful girl in forest, digital art\n"
        "‚Ä¢ space ship in cyberpunk style\n"
        "‚Ä¢ cute kitten, watercolor\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üêæ –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def handle_simple_generation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    log_user_message(message)
    await state.set_state(GenerationStates.waiting_for_animal_type)
    await message.answer(
        "üêæ <b>–ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—à–∞–≥–æ–≤–æ!\n\n"
        "<b>–®–∞–≥ 1/10:</b> –ö–∞–∫–æ–π –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ?\n\n"
        "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> fox, wolf, cat, dog, rabbit, bear, otter, deer, tiger, lion\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def handle_advanced(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    log_user_message(message)
    await advanced_features.start_advanced_generation(message, state)

@dp.message(F.text == "üìä –°—Ç–∞—Ç—É—Å SD")
async def handle_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    log_user_message(message)
    await cmd_status(message)

@dp.message(F.text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
async def handle_models(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π"""
    log_user_message(message)
    await advanced_features.show_models(message)

@dp.message(F.text == "üé≤ –°—ç–º–ø–ª–µ—Ä—ã")
async def handle_samplers(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—ç–º–ø–ª–µ—Ä–æ–≤"""
    log_user_message(message)
    await advanced_features.show_samplers(message)

@dp.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å")
async def handle_switch_model(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏"""
    log_user_message(message)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
    current_model = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    try:
        models = sd_client.get_models()
        if models:
            current_model_obj = next((m for m in models if m.get('title')), None)
            if current_model_obj:
                current_model = current_model_obj.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    except:
        pass
    
    await message.answer(
        f"üîÑ <b>–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:\n\n"
        f"üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        f"‚Ä¢ ‚≠ê –æ—Ç–º–µ—á–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å\n"
        f"‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\n"
        f"‚Ä¢ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <code>{current_model}</code>",
        reply_markup=get_models_keyboard(),
        parse_mode="HTML"
    )

@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def handle_my_tasks(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–æ–∏—Ö –∑–∞–¥–∞—á"""
    log_user_message(message)
    user_tasks = queue_manager.get_user_tasks(message.from_user.id)
    
    if not user_tasks:
        await message.answer("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", reply_markup=get_main_keyboard())
        return
    
    tasks_text = "üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    
    for i, task in enumerate(user_tasks[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á
        status_emoji = {
            GenerationStatus.QUEUED: "‚è≥",
            GenerationStatus.PROCESSING: "üîÑ",
            GenerationStatus.COMPLETED: "‚úÖ",
            GenerationStatus.FAILED: "‚ùå",
            GenerationStatus.CANCELLED: "üö´"
        }.get(task.status, "‚ùì")
        
        stage_desc = get_stage_description(task.stage) if task.status == GenerationStatus.PROCESSING else ""
        
        tasks_text += f"{i}. {status_emoji} <b>{task.prompt[:50]}...</b>\n"
        tasks_text += f"   –°—Ç–∞—Ç—É—Å: {task.status.value}\n"
        if stage_desc:
            tasks_text += f"   {stage_desc}\n"
        tasks_text += "\n"
    
    await message.answer(tasks_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "üìä –û—á–µ—Ä–µ–¥—å")
async def handle_queue_info(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—á–µ—Ä–µ–¥–∏"""
    log_user_message(message)
    queue_info = queue_manager.get_queue_info()
    
    queue_text = f"""
üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—á–µ—Ä–µ–¥–∏:</b>

üìã –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: <code>{queue_info['queue_length']}</code>
üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: <code>{'–î–∞' if queue_info['processing'] else '–ù–µ—Ç'}</code>
üìà –í—Å–µ–≥–æ –∑–∞–¥–∞—á: <code>{queue_info['total_tasks']}</code>
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <code>{queue_info['completed_tasks']}</code>

üí° <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ó–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ú–æ–∏ –∑–∞–¥–∞—á–∏" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
    """
    
    await message.answer(queue_text, reply_markup=get_main_keyboard(), parse_mode="HTML")

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    log_user_message(message)
    await cmd_help(message)

@dp.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    log_user_message(message)
    await message.answer("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup=get_main_keyboard(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    log_user_callback(callback)
    if callback.message:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    await callback.answer()

@dp.callback_query(F.data.startswith("switch_model_"))
async def handle_model_switch(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏"""
    log_user_callback(callback)
    if callback.data and callback.message:
        model_name = callback.data.replace("switch_model_", "")
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
            await callback.message.edit_text(
                f"üîÑ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...</b>\n\n"
                f"–ú–æ–¥–µ–ª—å: <code>{model_name}</code>\n"
                f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode="HTML"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –Ω–∞: {model_name}")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å
            success = sd_client.switch_model(model_name)
            
            if success:
                logging.info(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: {model_name}")
                await callback.message.edit_text(
                    f"‚úÖ <b>–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞!</b>\n\n"
                    f"–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å: <code>{model_name}</code>\n\n"
                    f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é.",
                    parse_mode="HTML"
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞: {model_name}")
                await callback.message.edit_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏</b>\n\n"
                    f"–ú–æ–¥–µ–ª—å: <code>{model_name}</code>\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                    f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                    f"‚Ä¢ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ\n"
                    f"‚Ä¢ WebUI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç\n"
                    f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏",
                    parse_mode="HTML"
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
                
        except Exception as e:
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            await callback.message.edit_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏</b>\n\n"
                f"–ú–æ–¥–µ–ª—å: <code>{model_name}</code>\n"
                f"–û—à–∏–±–∫–∞: <code>{str(e)}</code>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    
    await callback.answer()

@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_generation(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    log_user_callback(callback)
    if callback.data:
        task_id = callback.data.replace("cancel_", "")
        
        if task_id == "simple":
            # –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await state.clear()
            if callback.message:
                await callback.message.edit_text("‚ùå –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        else:
            # –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
            if queue_manager.cancel_task(task_id):
                if callback.message:
                    await callback.message.edit_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            else:
                if callback.message:
                    await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(GenerationStates.waiting_for_prompt)
async def handle_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    
    prompt = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    await state.update_data(prompt=prompt)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SD
    if not sd_client.is_available():
        await message.answer("‚ùå Stable Diffusion WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        task = queue_manager.add_task(message.from_user.id, prompt)
        queue_position = queue_manager.get_queue_position(task.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        status_msg = await message.answer(
            f"üìã <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å</b>\n\n"
            f"üìù –ü—Ä–æ–º–ø—Ç: <code>{prompt}</code>\n\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
            f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
            reply_markup=get_generation_keyboard(task.id),
            parse_mode="HTML"
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        if queue_position == 1:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(process_generation_queue())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        while task.status == GenerationStatus.QUEUED:
            await asyncio.sleep(2)
            queue_position = queue_manager.get_queue_position(task.id)
            if queue_position > 0:
                await status_msg.edit_text(
                    f"üìã <b>–û–∂–∏–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏</b>\n\n"
                    f"üìù –ü—Ä–æ–º–ø—Ç: <code>{prompt}</code>\n\n"
                    f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
                    reply_markup=get_generation_keyboard(task.id),
                    parse_mode="HTML"
                )
            else:
                break
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        while task.status == GenerationStatus.PROCESSING:
            await update_progress_message(task, status_msg)
            await asyncio.sleep(1)
            
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await status_msg.delete()
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())
    
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–æ—à–∞–≥–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
@dp.message(GenerationStates.waiting_for_animal_type)
async def handle_animal_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return
    
    animal_type = message.text.strip()
    await state.update_data(animal_type=animal_type)
    await state.set_state(GenerationStates.waiting_for_gender)
    
    await message.answer(
        f"üë§ <b>–®–∞–≥ 2/10:</b> –ü–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: <b>{animal_type}</b>\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> male, female, boy, girl\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(GenerationStates.waiting_for_gender)
async def handle_gender(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return
    
    gender = message.text.strip()
    data = await state.get_data()
    animal_type = data.get('animal_type', '')
    
    await state.update_data(gender=gender)
    await state.set_state(GenerationStates.waiting_for_fur_color)
    
    await message.answer(
        f"üé® <b>–®–∞–≥ 3/10:</b> –¶–≤–µ—Ç –º–µ—Ö–∞\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: <b>{gender} {animal_type}</b>\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> red, brown, white, black, gray, orange, golden, silver\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(GenerationStates.waiting_for_fur_color)
async def handle_fur_color(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ –º–µ—Ö–∞"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –º–µ—Ö–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return
    
    fur_color = message.text.strip()
    data = await state.get_data()
    animal_type = data.get('animal_type', '')
    gender = data.get('gender', '')
    
    await state.update_data(fur_color=fur_color)
    await state.set_state(GenerationStates.waiting_for_clothing)
    
    await message.answer(
        f"üëï <b>–®–∞–≥ 4/10:</b> –û–¥–µ–∂–¥–∞\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: <b>{gender} {fur_color} {animal_type}</b>\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> t-shirt, jacket, dress, armor, hoodie, sweater, bikini, swimsuit\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(GenerationStates.waiting_for_clothing)
async def handle_clothing(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–µ–∂–¥—ã"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–¥–µ–∂–¥—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return
    
    clothing = message.text.strip()
    data = await state.get_data()
    animal_type = data.get('animal_type', '')
    gender = data.get('gender', '')
    fur_color = data.get('fur_color', '')
    
    await state.update_data(clothing=clothing)
    await state.set_state(GenerationStates.waiting_for_pose)
    
    await message.answer(
        f"üé≠ <b>–®–∞–≥ 5/10:</b> –ü–æ–∑–∞\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: <b>{gender} {fur_color} {animal_type}</b> –≤ <b>{clothing}</b>\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> standing, sitting, running, jumping, dancing, swimming, playing\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(GenerationStates.waiting_for_pose)
async def handle_pose(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∑—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return
    
    pose = message.text.strip()
    data = await state.get_data()
    animal_type = data.get('animal_type', '')
    gender = data.get('gender', '')
    fur_color = data.get('fur_color', '')
    clothing = data.get('clothing', '')
    
    await state.update_data(pose=pose)
    await state.set_state(GenerationStates.waiting_for_expression)
    
    await message.answer(
        f"üòä <b>–®–∞–≥ 6/10:</b> –í—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: <b>{gender} {fur_color} {animal_type}</b> –≤ <b>{clothing}</b>, <b>{pose}</b>\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> happy, sad, angry, surprised, cute, confident, shy, excited\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(GenerationStates.waiting_for_expression)
async def handle_expression(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return
    
    expression = message.text.strip()
    data = await state.get_data()
    animal_type = data.get('animal_type', '')
    gender = data.get('gender', '')
    fur_color = data.get('fur_color', '')
    clothing = data.get('clothing', '')
    pose = data.get('pose', '')
    
    await state.update_data(expression=expression)
    await state.set_state(GenerationStates.waiting_for_location)
    
    await message.answer(
        f"üåç <b>–®–∞–≥ 7/10:</b> –ú–µ—Å—Ç–Ω–æ—Å—Ç—å\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: <b>{gender} {fur_color} {animal_type}</b> –≤ <b>{clothing}</b>, <b>{pose}</b>, <b>{expression}</b>\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> forest, city, beach, mountains, swimming pool, park, garden, fantasy world\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(GenerationStates.waiting_for_location)
async def handle_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–Ω–æ—Å—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return
    
    location = message.text.strip()
    data = await state.get_data()
    animal_type = data.get('animal_type', '')
    gender = data.get('gender', '')
    fur_color = data.get('fur_color', '')
    clothing = data.get('clothing', '')
    pose = data.get('pose', '')
    expression = data.get('expression', '')
    
    await state.update_data(location=location)
    await state.set_state(GenerationStates.waiting_for_activity)
    
    await message.answer(
        f"üéØ <b>–®–∞–≥ 8/10:</b> –î–µ–π—Å—Ç–≤–∏–µ/–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: <b>{gender} {fur_color} {animal_type}</b> –≤ <b>{clothing}</b>, <b>{pose}</b>, <b>{expression}</b>, –≤ <b>{location}</b>\n\n"
        f"üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b> playing, swimming, relaxing, working, exploring, celebrating, training\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–∏—à–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(GenerationStates.waiting_for_activity)
async def handle_activity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è/–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return
    
    activity = message.text.strip()
    data = await state.get_data()
    animal_type = data.get('animal_type', '')
    gender = data.get('gender', '')
    fur_color = data.get('fur_color', '')
    clothing = data.get('clothing', '')
    pose = data.get('pose', '')
    expression = data.get('expression', '')
    location = data.get('location', '')
    
    await state.update_data(activity=activity)
    await state.set_state(GenerationStates.waiting_for_priority)
    
    await message.answer(
        f"‚≠ê <b>–®–∞–≥ 9/10:</b> –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫–∏\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ: <b>{gender} {fur_color} {animal_type}</b> –≤ <b>{clothing}</b>, <b>{pose}</b>, <b>{expression}</b>, –≤ <b>{location}</b>, <b>{activity}</b>\n\n"
        f"üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-5):</b>\n"
        f"‚Ä¢ 0 - –û–±—ã—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–≤–µ—Å: 1.0)\n"
        f"‚Ä¢ 1 - –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–≤–µ—Å: 1.1)\n"
        f"‚Ä¢ 2 - –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–≤–µ—Å: 1.2)\n"
        f"‚Ä¢ 3 - –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–≤–µ—Å: 1.3)\n"
        f"‚Ä¢ 4 - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–≤–µ—Å: 1.4)\n"
        f"‚Ä¢ 5 - –£–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–æ (–≤–µ—Å: 1.5)\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 5!",
        reply_markup=get_simple_generation_keyboard(),
        parse_mode="HTML"
    )

@dp.message(GenerationStates.waiting_for_priority)
async def handle_priority(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    log_user_message(message)
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (0-5).")
        return
    
    try:
        priority = int(message.text.strip())
        if priority < 0 or priority > 5:
            await message.answer("‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É –æ—Ç 0 –¥–æ 5.")
        return
    
    data = await state.get_data()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    animal_type = data.get('animal_type', '')
    gender = data.get('gender', '')
    fur_color = data.get('fur_color', '')
    clothing = data.get('clothing', '')
    pose = data.get('pose', '')
    expression = data.get('expression', '')
    location = data.get('location', '')
    activity = data.get('activity', '')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –≤–µ—Å
    weight = 1.0 + (priority * 0.1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –≤–µ—Å–∞–º–∏
    prompt_parts = [
        f"({animal_type}:{weight:.1f})",
        f"({gender}:{weight:.1f})",
        f"({fur_color} fur:{weight:.1f})",
        f"({clothing}:{weight:.1f})",
        f"({location}:{weight:.1f})",
        f"({activity}:{weight:.1f})",
        f"({expression} expression:{weight:.1f})",
        f"({pose} pose:{weight:.1f})",
        f"detailed, high quality, digital art"
    ]
    
    prompt = ", ".join(prompt_parts)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SD
    if not sd_client.is_available():
        await message.answer("‚ùå Stable Diffusion WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.", reply_markup=get_main_keyboard())
        await state.clear()
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        task = queue_manager.add_task(message.from_user.id, prompt)
        queue_position = queue_manager.get_queue_position(task.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        status_msg = await message.answer(
            f"üìã <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å</b>\n\n"
            f"üé® <b>–°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂:</b>\n"
            f"‚Ä¢ –í–∏–¥: {animal_type}\n"
            f"‚Ä¢ –ü–æ–ª: {gender}\n"
            f"‚Ä¢ –¶–≤–µ—Ç: {fur_color}\n"
            f"‚Ä¢ –û–¥–µ–∂–¥–∞: {clothing}\n"
            f"‚Ä¢ –ü–æ–∑–∞: {pose}\n"
            f"‚Ä¢ –í—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression}\n"
            f"‚Ä¢ –ú–µ—Å—Ç–Ω–æ—Å—Ç—å: {location}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: {activity}\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority} ({weight:.1f})\n\n"
            f"üìù <b>–ü—Ä–æ–º–ø—Ç:</b> <code>{prompt}</code>\n\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
            f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
            reply_markup=get_generation_keyboard(task.id),
            parse_mode="HTML"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ–Ω–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)
        asyncio.create_task(process_generation_queue())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(monitor_task_progress(task, status_msg))
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())
    
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(AdvancedGenerationStates.waiting_for_prompt)
async def handle_advanced_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    log_user_message(message)
    await advanced_features.handle_advanced_prompt(message, state)

@dp.message(AdvancedGenerationStates.waiting_for_negative_prompt)
async def handle_negative_prompt(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    log_user_message(message)
    await advanced_features.handle_negative_prompt(message, state)

@dp.message(AdvancedGenerationStates.waiting_for_steps)
async def handle_steps(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤"""
    log_user_message(message)
    await advanced_features.handle_steps(message, state)

@dp.message(AdvancedGenerationStates.waiting_for_cfg_scale)
async def handle_cfg_scale(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ CFG Scale"""
    log_user_message(message)
    await advanced_features.handle_cfg_scale(message, state)

@dp.message(AdvancedGenerationStates.waiting_for_size)
async def handle_size(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    log_user_message(message)
    await advanced_features.handle_size(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
@dp.message(F.text)
async def handle_text_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    log_user_message(message)
    prompt = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SD
    if not sd_client.is_available():
        await message.answer("‚ùå Stable Diffusion WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.", reply_markup=get_main_keyboard())
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        task = queue_manager.add_task(message.from_user.id, prompt)
        queue_position = queue_manager.get_queue_position(task.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        status_msg = await message.answer(
            f"üìã <b>–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å</b>\n\n"
            f"üìù –ü—Ä–æ–º–ø—Ç: <code>{prompt}</code>\n\n"
            f"üìä –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_position}\n"
            f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...",
            reply_markup=get_generation_keyboard(task.id),
            parse_mode="HTML"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ–Ω–µ (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)
        asyncio.create_task(process_generation_queue())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(monitor_task_progress(task, status_msg))
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {update}: {exception}")
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –æ—á–µ—Ä–µ–¥—å—é...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SD WebUI
    if sd_client.is_available():
        logging.info("‚úÖ Stable Diffusion WebUI –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        logging.warning("‚ö†Ô∏è Stable Diffusion WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(process_generation_queue())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 